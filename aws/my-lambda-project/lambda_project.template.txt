-- FILE: lambda_function.py --
import os
import boto3

def lambda_handler(event, context):
    name = event.get('name') or event.get('queryStringParameters', {}).get('name', 'World')
    greeting = f"Hello, {name}!"

    if os.environ.get('DEBUG') == 'true':
        print(f"[DEBUG] Event: {event}")

    # Simulate writing to S3 (for integration test)
    if os.environ.get('BUCKET_NAME'):
        s3 = boto3.client('s3', region_name='us-east-1')
        s3.put_object(
            Bucket=os.environ['BUCKET_NAME'],
            Key='greeting.txt',
            Body=greeting
        )

    return {
        'statusCode': 200,
        'body': greeting
    }

-- FILE: events/api-gateway.json --
{
  "resource": "/hello",
  "path": "/hello",
  "httpMethod": "GET",
  "queryStringParameters": {
    "name": "Alice"
  }
}

-- FILE: env.json --
{
  "Variables": {
    "DEBUG": "true",
    "BUCKET_NAME": "test-bucket"
  }
}

-- FILE: tests/test_handler.py --
import os
import pytest
from lambda_function import lambda_handler

@pytest.fixture
def mock_event():
    return {
        'queryStringParameters': {
            'name': 'TestUser'
        }
    }

def test_lambda_handler_returns_200(mock_event):
    os.environ['DEBUG'] = 'true'
    response = lambda_handler(mock_event, None)

    assert response['statusCode'] == 200
    assert 'TestUser' in response['body']

-- FILE: tests/test_integration.py --
import os
import boto3
from moto import mock_s3
from lambda_function import lambda_handler

@mock_s3
def test_lambda_s3_integration():
    os.environ['BUCKET_NAME'] = 'test-bucket'
    os.environ['DEBUG'] = 'false'

    # Create mock S3 bucket
    s3 = boto3.client('s3', region_name='us-east-1')
    s3.create_bucket(Bucket='test-bucket')

    event = {
        'queryStringParameters': {
            'name': 'Charlie'
        }
    }

    response = lambda_handler(event, None)

    # Verify S3 object was created
    obj = s3.get_object(Bucket='test-bucket', Key='greeting.txt')
    body = obj['Body'].read().decode()

    assert response['statusCode'] == 200
    assert 'Charlie' in body

-- FILE: requirements.txt --
pytest
moto
boto3

